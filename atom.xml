<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>90neoculture&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://90neoculture.github.io/"/>
  <updated>2020-03-06T09:11:05.737Z</updated>
  <id>https://90neoculture.github.io/</id>
  
  <author>
    <name>90neoculture</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手写一个vue组件</title>
    <link href="https://90neoculture.github.io/2020/03/01/2020-03-01-vue-components/"/>
    <id>https://90neoculture.github.io/2020/03/01/2020-03-01-vue-components/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-03-06T09:11:05.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-故事的开始"><a href="#1-故事的开始" class="headerlink" title="1.故事的开始"></a>1.故事的开始</h3><pre><code>公司的运营后台管理系统有很多弹窗查询，查询结果显示在表格的页面，因此想抽出一个组件。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-故事的开始&quot;&gt;&lt;a href=&quot;#1-故事的开始&quot; class=&quot;headerlink&quot; title=&quot;1.故事的开始&quot;&gt;&lt;/a&gt;1.故事的开始&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;公司的运营后台管理系统有很多弹窗查询，查询结果显示在表格的页面，因此想抽出一个组件。
      
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="element-ui" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/%E7%BB%84%E4%BB%B6%E5%8C%96/element-ui/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/tags/es6/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/tags/vue/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vuex使用及原理</title>
    <link href="https://90neoculture.github.io/2020/02/06/2020-02-06-vue-vuex/"/>
    <id>https://90neoculture.github.io/2020/02/06/2020-02-06-vue-vuex/</id>
    <published>2020-02-05T16:00:00.000Z</published>
    <updated>2020-03-06T06:44:50.515Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/tags/es6/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/tags/vue/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你使用全局vue组件</title>
    <link href="https://90neoculture.github.io/2020/01/12/2020-01-12-vue-global-components/"/>
    <id>https://90neoculture.github.io/2020/01/12/2020-01-12-vue-global-components/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-03-06T03:26:22.439Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/%E6%A8%A1%E5%9D%97%E5%8C%96/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/tags/es6/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/tags/vue/"/>
    
      <category term="模块化" scheme="https://90neoculture.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://90neoculture.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>js代码优雅写法笔记</title>
    <link href="https://90neoculture.github.io/2019/10/06/2019-10-06-js%E4%BB%A3%E7%A0%81%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://90neoculture.github.io/2019/10/06/2019-10-06-js代码优雅写法笔记/</id>
    <published>2019-10-05T16:00:00.000Z</published>
    <updated>2020-03-06T09:10:56.074Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/vue/es6/js/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/tags/es6/"/>
    
      <category term="vue" scheme="https://90neoculture.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>手写简易版Promise</title>
    <link href="https://90neoculture.github.io/2019/09/22/2019-09-22-promise/"/>
    <id>https://90neoculture.github.io/2019/09/22/2019-09-22-promise/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2020-03-06T03:12:56.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-解决异步问题"><a href="#1-解决异步问题" class="headerlink" title="1.解决异步问题"></a>1.解决异步问题</h3><p>我们解决异步问题主要有以下几种方案：</p><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅</li><li>Promise对象</li></ul><p>以回调函数举例，我们这样以jQuery的ajax获取数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url, (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>如果需要发送多个异步请求，则会层层嵌套：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    $.<span class="keyword">get</span>(data.url, data2 =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data2)</span><br><span class="line">        $.<span class="keyword">get</span>(data2.url, data3 =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data3)</span><br><span class="line">            $.<span class="keyword">get</span>(data3.url, data4 =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data4)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种编码模式我们可以发现主要有一下几个问题：</p><ul><li>1.执行顺序与代码书写顺序并不一致，不利于阅读</li><li>2.上述回调函数基本都是匿名函数，不方便捕捉bug。</li><li>3.异步操作的顺序改变时，需要大规模的修改代码结构。</li><li>4.层层嵌套，形成回调地狱</li></ul><p>所以想要解决这些问题，给大家介绍ES6的Promise对象。</p><p>promise使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>Promise是JS异步编程中的重要概念，异步抽象处理对象，是目前比较流行Javascript异步编程解决方案之一。</li><li>promise的含义和用法可以点击链接查看：<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></li></ul><p>现在我们来了解Promises/A+ 规范</p><h3 id="2-了解Promises-A-规范"><a href="#2-了解Promises-A-规范" class="headerlink" title="2.了解Promises/A+ 规范"></a>2.了解Promises/A+ 规范</h3><p>promise/A+规范，点击链接查看：<a href="https://promisesaplus.com/" target="_blank" rel="noopener">https://promisesaplus.com/</a></p><p>通过规范我们了解到，要实现promise，首先要定义promise的状态，包括：等待状态（Pending） 执行状态（Fulfilled） 和 拒绝状态（Rejected）。</p><p>1.1 promise状态</p><ul><li><p>当promise处于请求状态（pending）时：<br>  promise可以转为fulfilled或rejected状态</p></li><li><p>当promise处于完成状态（fulfilled）时：<br>  promise不能转为任何其他状态<br>  必须有一个值，且此值不能改变</p></li><li><p>当promise处于拒绝状态（rejected）时：<br>  promise不能转为任何其他状态<br>  必须有一个原因（reason），且此原因不能改变</p></li></ul><p>1.2 then方法<br>promise的then方法接收两个参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure></p><ul><li><p>onFulfilled和onRejected都是可选的参数：<br>  如果 onFulfilled不是函数，必须忽略<br>  如果 onRejected不是函数，必须忽略</p></li><li><p>如果onFulfilled是函数:<br>  此函数必须在promise 完成(fulfilled)后被调用,并把promise 的值作为它的第一个参数<br>  此函数在promise完成(fulfilled)之前绝对不能被调用<br>  此函数绝对不能被调用超过一次</p></li><li><p>如果onRejected是函数:<br>  此函数必须在promise rejected后被调用,并把promise 的reason作为它的第一个参数<br>  此函数在promise rejected之前绝对不能被调用<br>  此函数绝对不能被调用超过一次</p></li><li><p>在执行上下文堆栈（execution context）仅包含平台代码之前，不得调用 onFulfilled和onRejected</p></li><li><p>onFulfilled和onRejected必须被当做函数调用</p></li><li><p>then可以在同一个promise里被多次调用<br>  如果 promise 完成执行（fulfilled）,各个相应的onFulfilled回调必须根据最原始的then 顺序来调用<br>  如果 promise 被拒绝（rejected）,各个相应的onRejected回调必须根据最原始的then 顺序来调用</p></li><li><p>then必须返回一个promise<br>  如果onFulfilled或onRejected返回一个值x, 运行Promise Resolution Procedure  <a href="promise2, x">[Resolve]</a><br>  如果onFulfilled或onRejected抛出一个异常e,promise2必须被拒绝（rejected）并把e当作原因<br>  如果onFulfilled不是一个方法，并且promise1已经完成（fulfilled）,promise2必须使用与promise1相同的值来完成（fulfiled）<br>  如果onRejected不是一个方法，并且promise1已经被拒绝（rejected）,promise2必须使用与promise1相同的原因来拒绝（rejected）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-简易版promise实现"><a href="#3-简易版promise实现" class="headerlink" title="3.简易版promise实现"></a>3.简易版promise实现</h3><p>根据上述要求，我们可以实现一个简易版的promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示promise的三种状态，便于后期维护</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将this对象赋值给 _that,便于后面调用</span></span><br><span class="line">    <span class="keyword">const</span> _that = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 初始状态为PENDING</span></span><br><span class="line">    _that.state = PENDING</span><br><span class="line">    <span class="comment">// value用于保存resolve 或者 reject 中传入的值</span></span><br><span class="line">    _that.value = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 用于保存then中的回调，把then中的回调保存起来在用户状态改变时使用</span></span><br><span class="line">    _that.resolvedCallbacks = []</span><br><span class="line">    _that.rejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为只有等待状态可以改变状态，首先两个函数都要先判断当前状态是否是等待中</span></span><br><span class="line">    <span class="comment">// 将当前状态更改为对应的状态，并且将传入的值赋值给value，遍历回调数组并执行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_that.state === PENDING) &#123;</span><br><span class="line">            _that.state = RESOLVED</span><br><span class="line">            _that.value = value</span><br><span class="line">            _that.resolvedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(_that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_that.state === PENDING) &#123;</span><br><span class="line">            _that.state = REJECTED</span><br><span class="line">            _that.value = value</span><br><span class="line">            _that.rejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(_that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行传入的参数并且将之前的两个函数当做参数传进去，并捕获错误并执行reject函数</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        fn(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onResolved</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _that = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 首先判断两个参数是否为函数类型，因为这两个参数时可选参数</span></span><br><span class="line">    <span class="comment">// 当参数不是函数类型时，需要创建一个函数赋值给对应的参数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123; <span class="keyword">throw</span> r &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="comment">// 如果状态是等待态的话，就往回调函数中push函数</span></span><br><span class="line">    <span class="comment">// 如果状态不是等待态，就去执行相应的函数</span></span><br><span class="line">    <span class="keyword">if</span>(_that.state === PENDING) &#123;</span><br><span class="line">        _that.resolvedCallbacks.push(onFulfilled)</span><br><span class="line">        _that.rejectedCallbacks.push(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_that.state === RESOLVED) &#123;</span><br><span class="line">        onFulfilled(_that.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_that.state === REJECTED) &#123;</span><br><span class="line">        onRejected(_that.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试案例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'resolved'</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line"> &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>参考文档：<br>Promises/A+规范-英文 [ <a href="https://promisesaplus.com/" target="_blank" rel="noopener">https://promisesaplus.com/</a> ]<br>Promises/A+规范-翻译 [ <a href="https://segmentfault.com/a/1190000002452115/" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002452115/</a> ]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-解决异步问题&quot;&gt;&lt;a href=&quot;#1-解决异步问题&quot; class=&quot;headerlink&quot; title=&quot;1.解决异步问题&quot;&gt;&lt;/a&gt;1.解决异步问题&lt;/h3&gt;&lt;p&gt;我们解决异步问题主要有以下几种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/js/es6/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://90neoculture.github.io/tags/es6/"/>
    
      <category term="promise" scheme="https://90neoculture.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>web前端开发之css动画小球粘粘效果</title>
    <link href="https://90neoculture.github.io/2019/09/05/2019-09-05-css3/"/>
    <id>https://90neoculture.github.io/2019/09/05/2019-09-05-css3/</id>
    <published>2019-09-04T16:00:00.000Z</published>
    <updated>2020-03-03T06:54:15.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-初步实现球粘贴效果"><a href="#1-初步实现球粘贴效果" class="headerlink" title="1.初步实现球粘贴效果"></a>1.初步实现球粘贴效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"effect"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blackball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"redball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.effect</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">contrast</span>(10);</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blackball</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>:black;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">blur</span>(5px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.redball</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">blur</span>(5px) ;</span><br><span class="line">  <span class="attribute">animation</span>:rball <span class="number">6s</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> rball&#123;</span><br><span class="line">  0%,100%&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  4%,54%&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  10%,60%&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">70px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20%,70%&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  34%,90%&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  41%&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50%&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="built_in">calc</span>(100% - 95px);</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-实现两颗蓝色球合在一起再分开"><a href="#2-实现两颗蓝色球合在一起再分开" class="headerlink" title="2.实现两颗蓝色球合在一起再分开"></a>2.实现两颗蓝色球合在一起再分开</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"effect"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blueball1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blueball2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.effect</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">contrast</span>(10);</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blueball1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">blur</span>(8px) ;</span><br><span class="line">  <span class="attribute">animation</span>:bball1 <span class="number">6s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blueball2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">240px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">blur</span>(8px) ;</span><br><span class="line">  <span class="attribute">animation</span>:bball2 <span class="number">6s</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> bball1&#123;</span><br><span class="line">  0%,100%&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  85%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">70px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  90%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">85px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">215px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">110px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> bball2&#123;</span><br><span class="line">  0%,100%&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  85%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">165px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">70px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  90%&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">85px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50%&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">215px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">110px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-初步实现球粘贴效果&quot;&gt;&lt;a href=&quot;#1-初步实现球粘贴效果&quot; class=&quot;headerlink&quot; title=&quot;1.初步实现球粘贴效果&quot;&gt;&lt;/a&gt;1.初步实现球粘贴效果&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://90neoculture.github.io/tags/css/"/>
    
      <category term="精妙绝伦css" scheme="https://90neoculture.github.io/tags/%E7%B2%BE%E5%A6%99%E7%BB%9D%E4%BC%A6css/"/>
    
      <category term="css动画" scheme="https://90neoculture.github.io/tags/css%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>web前端开发之实现bind,call,apply</title>
    <link href="https://90neoculture.github.io/2019/09/02/2019-09-02-apply-call/"/>
    <id>https://90neoculture.github.io/2019/09/02/2019-09-02-apply-call/</id>
    <published>2019-09-01T16:00:00.000Z</published>
    <updated>2020-03-06T03:16:05.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实现call"><a href="#1-实现call" class="headerlink" title="1.实现call"></a>1.实现call</h3><p>call()方法调用一个函数，其具有一个指定的this值和分别地提供的参数（参数的列表）。<br>也就是说使用call方法，你可以指定被调用函数的this值，并且给他传参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...parameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">'object'</span>) &#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="keyword">this</span></span><br><span class="line">  context[fn](...parameter);</span><br><span class="line">  <span class="keyword">delete</span> context[fn]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现apply"><a href="#2-实现apply" class="headerlink" title="2.实现apply"></a>2.实现apply</h3><p>apply()方法调用一个函数，其具有一个指定的this值，以及作为一个数组（或类数组对象）提供的参数。 注意：call()方法的作用和 apply() 方法类似，只有一个区别，就是 call()方法接受的是若干个参数的列表，而apply()方法接受的是一个包含多个参数的数组。<br>apply和call方法的区别就在于，call是传参数列表，apply是传一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context, parameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">'object'</span>) &#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="keyword">this</span></span><br><span class="line">  context[fn](parameter);</span><br><span class="line">  <span class="keyword">delete</span> context[fn]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现bind"><a href="#3-实现bind" class="headerlink" title="3.实现bind"></a>3.实现bind</h3><p>bind（）方法创建一个新函数，在调用时，将其this关键字设置为提供的值，并在调用新函数时提供任何前面提供的给定参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context,...innerArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...finnalyArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> me.call(context,...innerArgs,...finnalyArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-实现call&quot;&gt;&lt;a href=&quot;#1-实现call&quot; class=&quot;headerlink&quot; title=&quot;1.实现call&quot;&gt;&lt;/a&gt;1.实现call&lt;/h3&gt;&lt;p&gt;call()方法调用一个函数，其具有一个指定的this值和分别地提供的参数（参数的列表）。&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://90neoculture.github.io/tags/js/"/>
    
      <category term="原生js" scheme="https://90neoculture.github.io/tags/%E5%8E%9F%E7%94%9Fjs/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化之图片篇</title>
    <link href="https://90neoculture.github.io/2019/08/17/2019-08-17-picture/"/>
    <id>https://90neoculture.github.io/2019/08/17/2019-08-17-picture/</id>
    <published>2019-08-16T16:00:00.000Z</published>
    <updated>2020-03-06T03:14:42.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-PNG8-PNG24-PNG32的区别"><a href="#1-PNG8-PNG24-PNG32的区别" class="headerlink" title="1.PNG8/PNG24/PNG32的区别"></a>1.PNG8/PNG24/PNG32的区别</h3><ul><li>PNG8: 256=2^8色，支持透明</li><li>PNG24: 2^24色，不支持透明</li><li>PNG32: 2^24色，支持透明</li></ul><p>使用场景</p><ul><li>PNG8更适合那些颜色较单一的图像，且体积较小。</li><li>PNG24所展示的图片颜色较丰富，图片质量更高。</li><li>PNG32基本上就是PNG24，但是附带了全alpha通道。PNG32每个像素的深度为32位，其中RGBA四个通道各占8位。所谓的RGBA四个通道，就是红，绿，蓝，透明 这四种色值各自的大小，都用8位来表示（0～255）。</li></ul><h3 id="2-不同格式图片常用的业务场景"><a href="#2-不同格式图片常用的业务场景" class="headerlink" title="2.不同格式图片常用的业务场景"></a>2.不同格式图片常用的业务场景</h3><ol><li>jpg有损压缩，压缩率高，不支持透明——适用于大部分不需要透明图片的场景。  </li><li>png支持透明，兼容性良好——适用于大部分需要透明图片的场景。  </li><li>webp压缩程度更好，在iOS、webview有兼容性问题——适用于安卓全部</li><li>svg矢量图，代码内嵌，相对较小——适用于图片样式相对简单的业务场景（如iconfont等）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-PNG8-PNG24-PNG32的区别&quot;&gt;&lt;a href=&quot;#1-PNG8-PNG24-PNG32的区别&quot; class=&quot;headerlink&quot; title=&quot;1.PNG8/PNG24/PNG32的区别&quot;&gt;&lt;/a&gt;1.PNG8/PNG24/PNG32的区别&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="图片" scheme="https://90neoculture.github.io/categories/%E5%89%8D%E7%AB%AF/%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="前端" scheme="https://90neoculture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="图片" scheme="https://90neoculture.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
</feed>
